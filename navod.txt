//Laravel je framework, ktery je napsany v PHP a pouziva achitekturu MVC
// model - zde budou kody, ktere se staraji o prenost dat mezi aplikaci a databazi
// view - zde budou kody, ktere se staraji o vzhled stranky
// controller - cela logika stranky bude v controllerech

//nejpopularnejsi PHP frameworky
//Laravel, Nette, Symphony, YII
//vsechny jsou postavene na stejne architekture

//tyto frameworky mohou pouzivat libovolny frontend framework(react, vue, ...)
//maji vlastni frontend zalozeny na sablonach
//sablonovaci system oddeluje praci frontendaka a backendaka
//laravel pouziva sablonu typu BLADE, nette pouziva sablonu LATTE
//stahnete si rozsireni do VSC pro praci s sablonou
//Laravel Blade Snippets od Winnie Lin

//laravel od verze 11 pouziva defualtne SQLite misto mySQL systemu
//SQLite - single file databaze, embeded databaze
//stahneme si do VSC rozsireni SQLite Viewer or Florian Klampfer

//vytvoreni projektu
//spustime na slozce laravel-minikurz
//# composer create-project laravel/laravel zoo
//tento prikaz stahne soubory a vytvori projekt s nazvem zoo
//vyckejte dokud se neprovede cela operace Running migrations

//laravel nespoleha na xampp ma vlastni localni server a vlastni databazi sqlite
//stejne jako jsme to delali ve Vue, musime pomoci prikazove radky nastartovat localni server
//spustime v nasi slozce zoo
//# php artisan serve

//localni server se nam rozjede na teto adrese: http://127.0.0.1:8000/

//struktura projektu

//--SLOZKY--
// /app/ - toto je slozka, kam budeme davat controllery a modely
// /config/ - zde budeme uvadet prihlasovaci udaje k ruznym servicum/sluzbam (databaze, email, cloud, ...)
// /database/ - zde najdeme migracni soubory a databazi sqlite
// /public/ - zde bude frontendak mit CSS, JS a obrazky, ktere neche minifikovat
// /resources/ - zde budou nase Blade sablony
// /routes/ - zde budeme definovat jakou URL sablona dostane
// /storage/ - sem se budou ukladat soubory, ktere uploaduji uzivatele
// /tests/- zde jsou scripty, ktere testuji vasi aplikaci
// /vendor/ - zde jsou knihovny stazene pomoci composeru

//--SOUBORY--
// .env - soubor environment, apliakci muzeme spustit v ruznych modech/prostredich, kazde prostredi bdue mit vlastni .env soubor, v tomto souboru uvedeme prihlasovaci udaje k ruznym sluzbam (.env > /config/)
// .gitignore - soubory, ktere git neuvidi (nebudeme je nikdy commitovat)
// composer.json - seznam vsech knihoven vasi aplikace
// package.json - seznam vsech knihoven vasi aplikace
// vite.config.js - zde uvadime pravidla jak minifikovat soubory pri buildovani aplikace

//koukneme na nasi homepage
//kazda stranka ma svoji sablonu, kterou najdeme ve slozce /resources/views/
//kazda sablona ma koncovku nazvu .blade.php
// v sablone se echo provaci stejne jako ve vue pomoci {{ $promenna }}

//vytvorime si vlastni homepage sablonu
//toto je prikaz, ktery vypise sezanm vsech prikazu laravelu
//# php artisan
//tento prikaz nam vytvori sablonu homepage
//# php artisan make:view homepage

//jak zobrazit nasi novou stranku misto welcome.blade.php
//musime zmenit routovani
//routovani - kazda sablona ma pridelenou nejakou url
//koukme do souboru /routes/web.php
//zde prepiseme routu "/", aby misto welcome vypsala sablonu homepage

//komponenta
//znovu pouzitelna cast stranky (menu, hlavicka, paticka, a jine)
//vytvorime si komponentu menu
//# php artisan make:component menu
//komponenta se sklada ze 2 souboru (sablona a minicontroller)
//sablona vytvari vzhled komponenty (/resources/views/components)
//minicontroller se stara o logiku komponenty (/app/View/Components)

//musime nakodovat komoponentu menu.blade.php
//potom musime komponentu nekde pouzit
//komponentu pouzijeme tak, ze do jine sablony napiseme <x-nazev-komponenty />
//do sablony homepage vlozime <x-menu />

//vytvorime si ted komponentu i pro head stranky a naucime se pripojit CSS soubor
//# php artisan make:component head

//pripojime CSS soubor do stranky
//css soubory budeme davat do slozky public
//ve slozce public budeme mit css, js a obrazky
//kdykoliv bdueme chtit v sablone pripojit soubor ze slozky public, tak pouzijeme funkci asset()
// {{ asset('./css/style.css') }}

//v sablone muzete pouzit html komentare, ale je lepsi pouzit blade komentare
// {{-- toto je komentar --}}

//cvicne si vytvorime stranku kontakt
//# php artisan make:view kontakt
//nakodujeme blade sbalonu pridame x-head a x-menu
//musime strance pridelit nejake URL, napiseme to do /routes/web.php

//jak poslat data z backendu do sablony?
//abychom mohli poslat data do sbalony, tak musime pro sablonu nejprve vytvorit constroller
//controller obsahuje veskerou logiku stranky
//# php artisan make:controller HomepageController
// controller se vytvori do slozky /app/Http/Controllers

//v souboru web.php mame v route anonymni funkci ktera vykrelsuje sablonu
//tuto funkci presuneme do controlleru a dame ji jmeno index
//v route pak uvedem odkaz na contorller a funkci
//pokazde kdzy pouzijete contorller, tak musite uvest namespace use

//# php artisan make:controller KontaktController
//presuneme anonymni funkci z web.php do KontaktController
//dame funkci jmeno index
//ve web.php misto anonymni funkce budeme mit pole, kam uvedeme nazev controlleru a nazev funkce

//frontendak muze nektere hteml elmenty opodminkovat
//misto klasickeho php if() pouzije bladovsky @if()
//bladovsky @if je mnohem prehlednejsi

//poslete do sablony boolean promennou $jeOtevreno
//vypiste <h3>Mame otevreno</h3> nebo <h3>Mame zavreno</h3>

//jak fronendak zjisti jake promenne mu backendak poslal?
//do sablony vlozi tento kod: {{ dd(get_defined_vars()) }}

//stejne jako v klasickem php nemuzeme echovat pole
//pokud frontendak dostane pole, tak musi pole proiterovat
//@foreach()

//laravel a databaze
//laravelpouziva databazi sqlite, ale muzeme si to prepnout na mySQL
//staci v souboru .env prpsat radek a odkomentovat radky s prihlaosvacima udajema
//databazi sqlite najdeme ve slozce /database/

//migrace
//laravel si historii datbaze uklada do migracnich souboru
//diky tomu nemusime psat specificky sql pro ruzne systemy a muzeme se vracet v case
//migracni soubor piseme v PHP a laravel nam to pak prelozi do konkretniho sql jazyka podle toho jaky jsme si vybrali system
//struktura datbaze a jeji historie je tedy soucasti projektu a neni treba vytvaret extra exportovaci soubor
//migrace jsou ulozene ve slozce /database/migrations
//laravel uz 3 migracni soubory vytvoril a provedl migraci pri vytvareni projektu


//vytvorime si ted nas vlastni migracni soubor
//# php artisan make:migration nova_tabulka_zvire
//kazdy migracni soubor ma v nazvu casove razitko
//migracni soubor ma v sobe 2 funkce up() a down()
//up a down jsou protichudne operace, musite je vzdy obe nadefinovat
//pro vytvoreni nove tabulky se pouziva Schema::create();
//pro mazani se pouziva Schema::dropIfExists();

//ted kdyz uz mame migranci soubor pripraveny tka provedem migraci
# php artisan migrate

//muzeme si vyzkouset migraci vzit zpet
//toto vrati zpet posledni migraci
# php artisan migrate:rollback

//my budeme tabulku zvire potrebovat, tkaze provedeme znovu migraci
# php artisan migrate

//nyni si vytvorime novou migraci ktera prida sloupecek pohlavido tabulky zvire
# php artisan make:migration pridat_sloupecek_pohlavi_tabulce_zvire

//pokud cheme upravovat existujici tabulku tak pouzijeme
Schema::table();

//pak to namigrujeme
# php artisan migrate

//abychom mohli do tabulek zapisovat nebo tabulky cist v laravelu, tak je potreba mit pro kazdou tabulku model
# php artisan make:model ZvireModel
//soubor je umisten ve slozce /app/Models

//do souboru mocel musime uvest 2 informace
//nazev tabulky a primarni tabulky
//vsehcno ostatni uz si laravel pripravi sam
    protected $table = 'zvire';
    protected $primaryKey = 'id';
//model uz je pripraven k pouziti

//nyni naplnime tabulku testovacimi daty
//testovaci nebo vychozi data se do tabulek vkladaji pomoci seederu
# php artisan make:seeder ZvireSeeder
//soubor se vytvoril do slozky /database/seeders

//jak vytvorit novy zazanm do tabulky?
//1) vytvorime instanci modelu
//2) naplnime vlasnoti hodnotami
//3) zavolame funkci save()

//spustime seedovani
# php artisan db:seed --class=ZvireSeeder

//nyni mame v tabulce data
//zkusime si ta data vytahnout ven a vypsat je do sablony
//data budem vytahovat v souboru controller
//pokazde kdyz pouzijete model tka nezapomnete use namespace
//funkce ZvireModel::all(); vrati pole vsech objektu vsehc zvirat

//frontendak musi pole protierovat a yvpsat vlasntnosti objektu

//co jsme neprobrali?
//jak zpracovavat formulare? CRUD oprerace
//REST API
//routy s parametrem
//select where
//prihalsovani a middleware (pouzijte breeze nebo jetstream)
//buildovani aplikace
//propojeni s rectem nebo vue (pouzijte inertia)